<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ROS on Documentation for Hugo Learn Theme</title>
    <link>/kr/advanced_contents_ros1/</link>
    <description>Recent content in ROS on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 25 Dec 2022 12:23:03 +0900</lastBuildDate><atom:link href="/kr/advanced_contents_ros1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture1 - ROSCPP</title>
      <link>/kr/advanced_contents_ros1/lecture1/</link>
      <pubDate>Fri, 23 Dec 2022 03:00:51 +0900</pubDate>
      
      <guid>/kr/advanced_contents_ros1/lecture1/</guid>
      <description>roscpp Programming ros는 다양한 언어를 지원하고 있습니다. 지금까지 살펴보았던 rospy는 가장 쉽고 빠르게 배울 수 있어서 사용하였지만, UDPROS, Nodelet, Plugin과 같은 Advanced ROS 개발을 위해서는 C++ 프로그래밍을 통한 Node 개발이 필요합니다.
image from : wikipedia rospy를 통해 개념을 모두 익혔기 때문에 이번 강의에서는 개발 API를 위주로 roscpp을 배워보겠습니다.
가장 기초가 되는 Node 프로그래밍부터 차이점을 살펴봅시다. rospy roscpp #!/usr/bin/env python3 import rospy from std_msgs.msg import String def my_first_node(): # ROS nodes require initialization # It contains master registration, uploading parameters rospy.</description>
    </item>
    
    <item>
      <title>Lecture2 - More About ROS System</title>
      <link>/kr/advanced_contents_ros1/lecture2/</link>
      <pubDate>Thu, 22 Dec 2022 03:02:12 +0900</pubDate>
      
      <guid>/kr/advanced_contents_ros1/lecture2/</guid>
      <description>ROS Node가 실행되고 Topic 통신이 이루어지기 위해서 Master에게 자신을 등록하고 Master에 의한 Node간 TCPROS / UDPROS 연결이 이루어져야 합니다.
개념 정리와 예시, 그리고 데모를 통해 ROS의 통신 시스템에 대해 배워봅시다.
XMLRPC Extensible Markup Language - XML이란, 웹 서비스에서 데이터를 표현하기 위해 사용하는 마크업 언어입니다. (such as HTML), 모든 데이터를 구조화해서 transport하기 때문에 검색과 재사용에 유리합니다. ROS에서 사용하는 launch file도 xml을 사용하고 있으므로 ROS 개발자들에게는 익숙한 문법일 것입니다. image from : xml 파일의 비밀 RPC - remote procedure call 란, 분산 네트워크 환경에서의 프로그래밍을 용이하게 하기 위해 등장한 기술로, 원격에 정의된 함수를 로컬에서 호출하는 식으로 사용이 가능합니다.</description>
    </item>
    
    <item>
      <title>Lecture3 - SROS</title>
      <link>/kr/advanced_contents_ros1/lecture3/</link>
      <pubDate>Wed, 21 Dec 2022 03:02:41 +0900</pubDate>
      
      <guid>/kr/advanced_contents_ros1/lecture3/</guid>
      <description>이전 데모를 통해 ROS의 보안 취약성에 대해 살펴보았습니다. 이러한 취약점들을 개선하기 위한 방법으로 SROS에 대해 배워보겠습니다.
sros는 마지막 commit 2018년 이후 개발이 사실상 멈춘 프로젝트입니다. ROS 개발자들이 보안을 위해 어떠한 노력을 들였는지 정도만 살펴보고, 데모와 자세한 내용은 ROS 2 강의에서 이어나가도록 하겠습니다.
UDPROS가 roscpp만 지원했던 것처럼, sros도 rospy와 사용할 시 제한이 있습니다. TCPROS UDPROS rospy X O roscpp O O rosjava O O sros는 ROS의 client 라이브러리 소스 코드에 보안을 적용하여 새롭게 개발한 ROS Client Library입니다.</description>
    </item>
    
  </channel>
</rss>
