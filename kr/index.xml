<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2023 Road Balance ROS Lecture Note on Documentation for Hugo Learn Theme</title>
    <link>/kr/</link>
    <description>Recent content in 2023 Road Balance ROS Lecture Note on Documentation for Hugo Learn Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 02 Jan 2023 12:39:15 +0900</lastBuildDate><atom:link href="/kr/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lecture1 - Introduction to ROS 2</title>
      <link>/kr/ros2_basic_foxy/lecture1/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:15 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture1/</guid>
      <description>About ROS 2 image from : foxglove.dev ROS의 시작은 연구실이었습니다. 구글의 핵심 개발자였던 Scott Hassan은 2006년 Willow Garage를 설립하였고, 여기서 처음으로 ROS가 탄생하였습니다. 이후 Willow Garage는 여러 Spin-off를 거친 뒤 OSRF와 OSRC등으로 나뉘게 되었고, 현재 Gazebo와 ROS는 이들에 의해 관리되고 있습니다.
2022년 12월 기준 구글의 자회사인 Alphabet의 Intrinsic이 OSRF를 품게 되었으며, Ubuntu Linux를 관리하는 Canonical에서 ROS의 공식 서포트를 약속하고, Jetson 보드와 Issac Sim들을 개발하고 있는 Nvidia에서도 ROS를 공식 지원하고 있습니다.</description>
    </item>
    
    <item>
      <title>Lecture2 - ROS 2 Node, Package</title>
      <link>/kr/ros2_basic_foxy/lecture2/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:13 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture2/</guid>
      <description>ROS Noetic 강의를 이미 학습하였기 때문에, Node, Package, launch file, Topic, Message, Service와 같은 개념은 이미 알고 계실 것이라 생각합니다. (맞죠?)
혹시나 잊어버리셨을 수 있으니 강의 중간중간 제가 간단히 리뷰를 하면서 진행하겠습니다.
ROS 2 Node image from : docs.rog.org ROS에서의 Node는 하나의 실행 가능한 프로그램을 이야기하며, 각각의 Node는 본인 고유의 기능을 담당합니다.
서로 다른 역할을 담당하는 Node들이 각자의 동작을 수행하고 서로 간의 데이터를 주고받게 됨으로 시스템을 형성하게 되고, 따라서, ROS를 통한 로봇 개발은 곧, 적절한 Node들의 개발이라고도 말할 수 있습니다.</description>
    </item>
    
    <item>
      <title>Lecture3 - ROS 2 Node Programming, ROS 2 parameter</title>
      <link>/kr/ros2_basic_foxy/lecture3/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:11 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture3/</guid>
      <description>Python을 사용하여 Node Programming을 실습해봅시다. 강의 마지막에는 간단히 C++ 코딩에 대해서도 다뤄보겠습니다.
example 1 - Hello ROS 2 강의를 위해 준비된 예제 코드 패키지를 실습하고 분석하겠습니다.
$ colcon build --packages-select cbp py_node_tutorial $ source install/local_setup.bash $ ros2 run py_node_tutorial example_node_1 [INFO] [1672463872.778216198] [example_node_1]: ==== Hello ROS 2 ==== 모든 예제 코드는 아래 링크에서 확인할 수 있습니다. https://github.com/RB2023ROS/du2023-ros2/tree/main/py_node_tutorial/py_node_tutorial
코드 분석을 차근차근 함께 해보겠습니다.
rcl은 ROS Client Libraries의 약자로 ROS 2에서는 rclc, rclcpp, rclpy, rcljs와 같은 다양한 언어를 지원하고 있습니다.</description>
    </item>
    
    <item>
      <title>Lecture4 - ROS 2 Node C&#43;&#43; Programming</title>
      <link>/kr/ros2_basic_foxy/lecture4/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:10 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture4/</guid>
      <description>실제 로봇 개발에서 Python만 사용되지는 않습니다. tensorflow, pytorch와 같은 딥러닝 프레임워크들이 모두 Python을 사용하고 있고, 상대적으로 개발 과정이 쉬워 많은 사람들이 Python을 사용하고 있지만, 제어, 센싱을 위해서는 C++를 대부분 사용한다고 보시면 됩니다.
image from : wikipedia 따라서 앞선 node 프로그래밍 예시들을 모두 C++로 구현해 볼 예정입니다. 아래와 같은 C++ 지식이 필요하지만 필수는 아닙니다.
클래스 생성 (OOP) 스마트 포인터 헤더 분리 람다 함수 std::bind와 placeholders C++ 빌드 시스템 (CMake) 코드 설명에 앞서 ROS 2 C++ 패키지를 개발하는 절차에 대해 빠르게 훑어보겠습니다.</description>
    </item>
    
    <item>
      <title>Lecture5 - ROS 2 Topic and Examples</title>
      <link>/kr/ros2_basic_foxy/lecture5/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:05 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture5/</guid>
      <description>Topic에 대해 배워보기 전에, 실습 시스템을 구축해봅시다.
SRC Gazebo 이번 ROS 2 강의의 실습들은 Road Balance의 차량형 로봇 SRC를 통해 진행하고자 합니다. 실습을 진행하기 전 Gazebo 환경을 함께 세팅해보겠습니다.
src_gazebo 실행 세팅 - 다소 번거로운 작업이므로 gif를 보시면서 차근차근 잘 따라와주세요! cd ~/ros2_ws/src/du2023-ros2 ./setup_scripts.sh # CMakeLists.txt 수정 (주석) colcon build --packages-select src_gazebo source install/local_setup.bash # CMakeLists.txt 수정 (주석 해제) colcon build --packages-select src_gazebo colcon build --packages-select src_odometry colcon build --packages-select src_controller source install/local_setup.</description>
    </item>
    
    <item>
      <title>Lecture6 - ROS 2 Service and Examples</title>
      <link>/kr/ros2_basic_foxy/lecture6/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:03 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture6/</guid>
      <description>ROS 2 Service ROS Service의 개념을 다시 복습해봅시다.
image from : docs.ros.org Service 개념 정리
Service를 요청하는 주체를 Service Client라고 하며, Service 요청 자체를 Request, 혹은 Call이라고 합니다. Service를 요청받는 주체를 Service Server라고 하며, Service Server는 Request에 대한 응답, 즉 Service Response를 다시 Service Client에게 회답합니다. Request와 Response를 위해 사용되는 데이터 타입은 srv라고 하며 Request와 Response로 나뉩니다. Service의 중요한 특징 한 가지 추가하자면, 하나의 Service Server에 여러 Client가 request 할 수 있지만, Server는 동시에 여러 request를 처리하지 못합니다.</description>
    </item>
    
    <item>
      <title>Lecture7 - Useful ROS 2 Example, Navigation2</title>
      <link>/kr/ros2_basic_foxy/lecture7/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:02 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture7/</guid>
      <description>코딩을 시작하기 전에 구현해야 하는 기능들과 Topic, Service 기준 input, output을 정리해봅시다.
Part 1 - 감옥 구현 거북이가 일정 범위를 벗어나게 되면 다시 원위치로 돌아오게 한다.
거북이의 위치는 /turtle1/pose topic subscribe을 통해 얻을 수 있습니다. 거북이가 일정 위치를 벗어나는 순간, 원위치로 돌아오게 하는 /turtle1/teleport_absolute service call을 해야 합니다. 이를 위한 service client가 필요합니다. Part 2 - 감옥 크기 변경 사용자로부터 감옥의 크기를 변경해달라는 service request가 오면 기존 감옥의 크기를 변경하는 작업이 필요하다.</description>
    </item>
    
    <item>
      <title>Lecture8 - ROS 2 Action and Examples</title>
      <link>/kr/ros2_basic_foxy/lecture8/</link>
      <pubDate>Mon, 02 Jan 2023 12:39:00 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture8/</guid>
      <description>지금까지 Topic, Service에 대해 모두 배워보았습니다. 마지막 통신 메커니즘인 Action에 대해서 배워봅시다.
ROS2 Action 개념 Action은 Service와 Topic의 특성을 모두 갖고 있으며, 실제로 가장 늦게 탄생한 통신 메커니즘입니다. 일전 Service의 단점을 상기시켜보면서 Action의 필요성에 대해 체감해봅시다.
Service의 중요한 특징 한 가지 추가하자면, 하나의 Service Server에 여러 Client가 request 할 수 있지만, Server는 동시에 여러 request를 처리하지 못합니다.
image from : docs.ros.org Action은 바로 이러한 Service의 단점을 극복하기 위해 탄생한 통신 메커니즘입니다.</description>
    </item>
    
    <item>
      <title>Lecture9 - C&#43;&#43; Programming Again, Outro</title>
      <link>/kr/ros2_basic_foxy/lecture9/</link>
      <pubDate>Mon, 02 Jan 2023 12:38:58 +0900</pubDate>
      
      <guid>/kr/ros2_basic_foxy/lecture9/</guid>
      <description>C++ Programming Again 실질적으로 C++을 통해 ROS 2 개발이 많이 이루어진다 이야기하였습니다. Topic Publish와 Subscriber의 C++코드들도 turtlesim 예제와 함꼐 간단하게 정리해보았습니다.
Topic Publish 예제 - Random Movement Turtle 예제 실행 cbp cpp_topic_tutorial source install/local_setup.bash # Terminal 1 ros2 run turtlesim turtlesim_node # Terminal 2 ros2 run cpp_topic_tutorial topic_pub_node ⇒ 거북이가 마구잡이로 움직이기 시작할 것입니다
로봇을 움직이기 위해서는 geometry_msgs/msg/Twist 형식의 topic message type을 사용해야 함을 배운 바 있습니다. 이를 위해서 다음과 같이, 헤더를 include 하면 됩니다.</description>
    </item>
    
    <item>
      <title>Lecture1 - Introduction to ROS</title>
      <link>/kr/ros_basic_noetic/lecture1/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:35 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture1/</guid>
      <description>What is ROS? ROS란, 로봇 소프트웨어 개발에 사용되는 일종의 프레임워크입니다.
프레임워크라는 말은, ROS 나름대로의 실행 시나리오를 갖고 있다는 뜻입니다.
사용자인 우리들은, 이 시나리오를 사용하여 로봇을 다루는 우리만의 Application을 만들게 됩니다.
image from : wikimedia 그런데 왜 OS라는 이름이 붙게 되었을까요?
로봇을 실행하기 위해서, 수많은 프로그램들이 실행되며, ROS는 이들 사이의 우선순위와, 프로그램 사이의 데이터 흐름을 책임집니다. 이 작업은 스케쥴링이라고 불리며, 이러한 동작을 수행하는 시스템을 Operating System이라고 부르기 때문에 ROS라는 이름을 갖게 되었습니다.</description>
    </item>
    
    <item>
      <title>Lecture2 - Dev Env Setup</title>
      <link>/kr/ros_basic_noetic/lecture2/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:33 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture2/</guid>
      <description>Develpoment Environment Setup 프로젝트 기반의 강의인 만큼, 개발 환경이 구축되지 않으면 앞으로의 실습을 진행할 수 없습니다. 따라서 이번 파트에 많은 시간을 배정하였고, 힘들 수 있지만 끝까지 따라와주시면 감사합니다.
준비한 환경은 다음과 같습니다.
Ubuntu Linux 설치와 ROS 설정 wsl2를 기반으로 한 Windows 내 ROS 설정 Docker 기반의 ROS 설정 1,2,3 순서로 추천하는 설정입니다. 1번을 진행하시다가 도저히 못하겠으면 2번으로, 그래도 안되면 3번으로 진행해 주시면 됩니다.
Ubuntu Linux 설치와 ROS 설정 Linux라고 함은 사실 OS 자체라기보다 OS의 기초가 되는 코어 소프트웨어에 가깝습니다.</description>
    </item>
    
    <item>
      <title>Lecture3 - Core of ROS</title>
      <link>/kr/ros_basic_noetic/lecture3/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:31 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture3/</guid>
      <description>지난 시간 개발환경 세팅을 잘 진행하였는지 확인을 해보면서 강의를 시작해보겠습니다.
터미널 프로그램을 실행한 뒤, gazebo를 실행해 봅시다.
gazebo 위 사진과 같은 화면이 나오지 않았다면 설치가 제대로 되지 않은 것입니다. (sudo apt install libgazebo11 을 통해 다시 설치해봅시다.)
About Gazebo Gazebo의 특징과 기본적인 UI, 그리고 사용법을 짚고 넘어가고자 합니다.
image from : Open Robotics Gazebo는 로봇공학을 위해 제작된 전용 물리 엔진 기반의 높은 3D 시뮬레이터입니다.
ROS를 관리하는 Open Robotics에서 비롯된 시뮬레이터인만큼 ROS와 높은 호환성을 자랑합니다.</description>
    </item>
    
    <item>
      <title>Lecture4 - ROS Launch, RViz</title>
      <link>/kr/ros_basic_noetic/lecture4/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:28 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture4/</guid>
      <description>ROS Launch 일전 예시 실행에서 다음과 같은 커멘드 라인을 사용했었습니다.
roslaunch smb_gazebo smb_gazebo.launch roslaunch란, 다수의 ROS Node들을 한번에 실행할 수 있도록 해주는 툴 입니다.
roslaunch를 사용하기 위해서는 xml이라는 포멧을 사용하는 launch file이 있어야 하며, 이는 보통 패키지의 launch 폴더에 위치하고 있습니다.
launch file의 구조를 파악해봅시다.
launch파일은 xml이라는 문법을 사용합니다. html을 사용해보셨다면 아시겠지만, &amp;lt;&amp;gt;를 이용하여 라인을 구분하는 포멧입니다. 한 라인에서 끝나는 경우 /&amp;gt;로 맺을 수 있지만, 여러 라인이 필요한 경우에는 여는 태그와 닫는 태그를 사용하여 구분합니다.</description>
    </item>
    
    <item>
      <title>Lecture5 - First Programming, ROS Topic</title>
      <link>/kr/ros_basic_noetic/lecture5/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:26 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture5/</guid>
      <description>이번 강의부터, 본격적인 프로그래밍이 시작됩니다. 첫번째로 Node의 프로그래밍을 살펴보고자 하며, 시작 전 간단한 복습을 진행하고 시작하겠습니다.
image from : clearpathrobotics
Workspace와 패키지 # WS 생성 mkdir -p catkin_ws/src cd catkin_ws catkin config --init # Package 생성 catkin_create_pkg &amp;lt;pkg-name&amp;gt; &amp;lt;depend1&amp;gt; &amp;lt;depend2&amp;gt; ... ROS Node Programming C++ 코드는 src 폴더 안에, 파이썬 코드는 scripts라는 폴더 안에 위치시키는 것이 일반적입니다. cd &amp;lt;pkg-name&amp;gt; mkdir scripts 지금부터, 직접 명령어를 한줄씩 따라치면서 실습하셔도 좋고, 제가 미리 준비해둔 Package를 사용하셔도 좋습니다.</description>
    </item>
    
    <item>
      <title>Lecture6 - ROS Service, Parameter</title>
      <link>/kr/ros_basic_noetic/lecture6/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:25 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture6/</guid>
      <description>지난 시간 마지막 예시였던 장애물 회피 코드부터 간단하게 리뷰해보고자 합니다.
제가 작성한 로직은 다음과 같습니다.
과제를 해보셨다면 아시겠지만, 측정 범위를 벗어나게 되면 data.ranges는 inf 값을 갖게 됩니다. 이를 걸러내는 코드가 아래 부분입니다. for i, point in enumerate(data.ranges): if not math.isinf(point) and point &amp;lt; 1.0: 저의 로직은, 정면을 기점으로 왼쪽과 오른쪽 각각 inf가 아닌 데이터의 개수를 카운팅합니다. 전체 데이터가 362개이고 마지막 데이터는 사용하기 않는 값이기 때문에, 180을 기점으로 잡았습니다. left_side_count = 0 right_side_count = 0 for i, point in enumerate(data.</description>
    </item>
    
    <item>
      <title>Lecture7 - Rqt Tools and rosbag, ROS Time</title>
      <link>/kr/ros_basic_noetic/lecture7/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:23 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture7/</guid>
      <description>강의 초반, 다양한 rqt tool들을 살펴본 바 있습니다. 이제는 Topic과 Service에 모두 익숙해졌기 때문에, rqt의 많은 기능들을 사용할 수 있습니다. 다시 한 번 rqt를 살펴보면서 편리한 툴들의 사용법을 익혀봅시다.
Message Publisher &amp;amp; Topic Monitor 강의자를 따라 다음과 같이 화면을 구성합니다.
plugins ⇒ topics ⇒ Message Publisher pulgins ⇒ topics ⇒ Topic Monitor message publisher를 사용하면 코딩 없이 cmd_vel을 publish가 가능합니다. Topic Msg에 원하는 데이터를 채워넣은 뒤, 주기를 선택한 후 체크박스를 클릭하면 로봇이 움직이기 시작합니다.</description>
    </item>
    
    <item>
      <title>Lecture8 - Deal with Open Source Projects, Custom Interfaces</title>
      <link>/kr/ros_basic_noetic/lecture8/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:21 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture8/</guid>
      <description>Deal with Open Source Projects 이번 시간에는 오픈 소스 프로젝트를 사용하는 방법에 대해 배워보겠습니다. 보다 실질적인 사용 방법을 보여드리기 위해 저 또한 여러분들과 같은 상황에서 처음부터 하나씩 같이 해보겠습니다.
오늘 데모하고자 하는 로봇 소프트웨어는 드론 시뮬레이션입니다. 지금까지 지상을 움직이는 바퀴 로봇만을 다루었기 때문에 새로운 플렛폼을 동작시켜보고자 합니다.
항상 시작은 구글링부터!! 검색 결과 원하는 패키지를 찾은 것 같습니다. &amp;gt; https://github.com/RAFALAMAO/hector-quadrotor-noetic 목적에 부합하는 오픈소스를 찾기 위해서 아래와 같은 기본적인 내용을 고려해야 합니다.</description>
    </item>
    
    <item>
      <title>Lecture9 - ROS TF and Examples</title>
      <link>/kr/ros_basic_noetic/lecture9/</link>
      <pubDate>Sun, 25 Dec 2022 13:36:19 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture9/</guid>
      <description>대부분의 로보틱스 과정들에서 가장 먼저 다루는 것이 바로 좌표계 변환(Transformation) 입니다. 로봇은 수많은 joint와 link로 이루어져 있기 때문에 좌표계를 다루는 일이 매우 빈번합니다.
ROS에서는 TF라는 특수한 형태로 이 좌표계와 시간을 함께 다루고 있습니다. 예시와 설명을 통해 ROS의 TF에 대해 배워봅시다 😊
image from : eth robot dynamics lecture notes ROS는 오픈소스이니만큼 사용자들이 원하는 기능들에 맞추어 변화가 빠릅니다. 하지만 이것이 단점이 되는 경우도 있는데, 이전 버전과 최신 버전의 호환성 문제가 종종 발생합니다.</description>
    </item>
    
    <item>
      <title>Lecture10 - TF2 Examples, Outro</title>
      <link>/kr/ros_basic_noetic/lecture10/</link>
      <pubDate>Sat, 24 Dec 2022 13:48:05 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture10/</guid>
      <description>tf2 사례 제가 강조해서 자꾸 좌표계가 tf가 중요하다고 말하고 있는데, 그 이유를 예시와 함께 좀 더 자세히 살펴보고자 합니다.
husky slam # 예시 종속성 설치 sudo apt install ros-noetic-slam-gmapping # Terminal 1 roslaunch smb_gazebo smb_gazebo.launch world:=big_map_summer_school # Terminal 2 roslaunch py_tf2_tutorial slam_gmapping.launch # Terminal 3 rosrun teleop_twist_keyboard teleop_twist_keyboard.py # [option] rviz (이전 예시에서 rviz를 추가하였다면 넘어가셔도 좋습니다.) rviz rviz를 다음과 같이 세팅합니다. 이제 teleop을 통해 로봇을 이동시키면서, rviz 화면의 변화를 확인해봅시다.</description>
    </item>
    
    <item>
      <title>Lecture11 - ROSCPP</title>
      <link>/kr/ros_basic_noetic/lecture11/</link>
      <pubDate>Fri, 23 Dec 2022 03:00:51 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture11/</guid>
      <description>roscpp Programming ros는 다양한 언어를 지원하고 있습니다. 지금까지 살펴보았던 rospy는 가장 쉽고 빠르게 배울 수 있어서 사용하였지만, UDPROS, Nodelet, Plugin과 같은 Advanced ROS 개발을 위해서는 C++ 프로그래밍을 통한 Node 개발이 필요합니다.
image from : wikipedia rospy를 통해 개념을 모두 익혔기 때문에 이번 강의에서는 개발 API를 위주로 roscpp을 배워보겠습니다.
가장 기초가 되는 Node 프로그래밍부터 차이점을 살펴봅시다. rospy roscpp #!/usr/bin/env python3 import rospy from std_msgs.msg import String def my_first_node(): # ROS nodes require initialization # It contains master registration, uploading parameters rospy.</description>
    </item>
    
    <item>
      <title>Lecture12 - More About ROS System</title>
      <link>/kr/ros_basic_noetic/lecture12/</link>
      <pubDate>Thu, 22 Dec 2022 03:02:12 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture12/</guid>
      <description>ROS Node가 실행되고 Topic 통신이 이루어지기 위해서 Master에게 자신을 등록하고 Master에 의한 Node간 TCPROS / UDPROS 연결이 이루어져야 합니다.
개념 정리와 예시, 그리고 데모를 통해 ROS의 통신 시스템에 대해 배워봅시다.
XMLRPC Extensible Markup Language - XML이란, 웹 서비스에서 데이터를 표현하기 위해 사용하는 마크업 언어입니다. (such as HTML), 모든 데이터를 구조화해서 transport하기 때문에 검색과 재사용에 유리합니다. ROS에서 사용하는 launch file도 xml을 사용하고 있으므로 ROS 개발자들에게는 익숙한 문법일 것입니다. image from : xml 파일의 비밀 RPC - remote procedure call 란, 분산 네트워크 환경에서의 프로그래밍을 용이하게 하기 위해 등장한 기술로, 원격에 정의된 함수를 로컬에서 호출하는 식으로 사용이 가능합니다.</description>
    </item>
    
    <item>
      <title>Lecture13 - SROS</title>
      <link>/kr/ros_basic_noetic/lecture13/</link>
      <pubDate>Wed, 21 Dec 2022 03:02:41 +0900</pubDate>
      
      <guid>/kr/ros_basic_noetic/lecture13/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
